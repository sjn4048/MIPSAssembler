using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.IO;

namespace MIPSAssembler_Winform
{
    class MIPSAssembler
    {
        Register[] registers;
        //FileStream oFile;

        private static readonly char[] delimitter = { ' ', '\t', ',', '\n', ';', '(', ')' };
        public uint CurrentAddress { get; private set; }
        public Dictionary<string, uint> Labels { get; private set; }
        public Dictionary<string, int> Variables { get; private set; }
        private static Dictionary<string, uint> PseudoIns_To_RealIns_Num = new Dictionary<string, uint>()
        {
            { "la", 2 },
            { "li", 2 },
            { "EQU",0 },
        };

        public MIPSAssembler()
        {
            this.registers = Register.GetRegisters();
            CurrentAddress = 0;
            //this.oFile = new FileStream(filename, FileMode.Open);
        }

        public string MipsToBin(string MipsCode)
        {
            var instructions = MipsCode.Split('\n'); // 分割指令
            // 第一次扫描
            Labels = new Dictionary<string, uint>();
            Variables = new Dictionary<string, int>();
            CurrentAddress = 0;
            string result = "";
            foreach (string instruction in instructions)
            {
                FirstScan(instruction);
            }

            //第二次扫描
            CurrentAddress = 0;
            foreach (string instruction in instructions)
            {
                string[] field = instruction.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
                if (instruction.StartsWith("BaseAddre:"))
                {
                    uint base_addr = Convert.ToUInt32(instruction.Substring(10, instruction.Length - 10), 16);
                    if (CurrentAddress > base_addr)
                        throw new Exception("BaseAddre Incorrect.");
                    for (; CurrentAddress < base_addr; CurrentAddress++)
                    {
                        result += "00000000";
                    }
                    CurrentAddress = base_addr;
                    continue;
                }
                if (instruction.StartsWith("DataAddre:"))
                {
                    uint data_addr = Convert.ToUInt32(instruction.Substring(10, instruction.Length - 10), 16);
                    if (CurrentAddress > data_addr)
                        throw new Exception("BaseAddre Incorrect.");

                    for (; CurrentAddress < data_addr; CurrentAddress++)
                    {
                        result += "00000000";
                    }
                    CurrentAddress = data_addr;
                    continue;
                }
                if (instruction.StartsWith("#") || instruction.StartsWith("//") || field.Length == 0) // 注释
                    continue;
                if (instruction.Contains(':')) // 编码
                    continue;
                var byte_res = AnalyzeInstruction(instruction, field[0]);
                result += BitConverter.ToString(byte_res).Replace("-", string.Empty).ToLower();
            }
            for (int i = 4; i < result.Length; i += 5)
                result = result.Insert(i, " ");
            for (int i = 40; i < result.Length; i += 41)
                result = result.Insert(i, "\n");

            return result;
        }

        public string MipsToCoe(string MipsCode)
        {
            string header = ";Generated by MIPSAssember\nmemory_initialization_radix=16;\nmemory_initialization_vector=\n";

            var instructions = MipsCode.Split('\n'); // 分割指令
            // 第一次扫描
            Labels = new Dictionary<string, uint>();
            Variables = new Dictionary<string, int>();
            CurrentAddress = 0;
            string result = "";
            foreach (string instruction in instructions)
            {
                FirstScan(instruction);
            }

            //第二次扫描
            CurrentAddress = 0;
            foreach (string instruction in instructions)
            {
                string[] field = instruction.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
                if (instruction.StartsWith("#") || instruction.StartsWith("//") || field.Length == 0) // 注释
                    continue;
                if (instruction.StartsWith("BaseAddre:"))
                {
                    uint base_addr = Convert.ToUInt32(instruction.Substring(10, instruction.Length - 10).Trim(), 16);
                    if (CurrentAddress > base_addr)
                        throw new Exception("BaseAddre Incorrect.");
                    for (; CurrentAddress < base_addr; CurrentAddress++)
                    {
                        result += "00000000";
                    }
                    CurrentAddress = base_addr;
                    continue;
                }
                if (instruction.StartsWith("DataAddre:"))
                {
                    uint data_addr = Convert.ToUInt32(instruction.Substring(10, instruction.Length - 10).Trim(), 16);
                    if (CurrentAddress > data_addr)
                        throw new Exception("BaseAddre Incorrect.");

                    for (; CurrentAddress < data_addr; CurrentAddress++)
                    {
                        result += "00000000";
                    }
                    CurrentAddress = data_addr;
                    continue;
                }
                if (instruction.Contains(':')) // 编码
                    continue;
                var byte_res = AnalyzeInstruction(instruction, field[0]);
                result += BitConverter.ToString(byte_res).Replace("-", string.Empty).ToLower();
            }
            for (int i = 8; i < result.Length; i += 10)
                result = result.Insert(i, ", ");
            result = result + ';';
            for (int i = 100; i < result.Length; i += 101)
                result = result.Insert(i, "\n");

            return header + result;
        }

        public byte[] AnalyzeInstruction(string instruction, string op)
        {
            byte[] byte_res;

            if (PseudoIns_To_RealIns_Num.ContainsKey(op))
                CurrentAddress += PseudoIns_To_RealIns_Num[op]; // 非长久之计
            else
                CurrentAddress++;
            switch (op.ToLower())
            {
                case "add":
                    byte_res = generate_add(instruction);
                    break;
                case "addu":
                    byte_res = generate_addu(instruction);
                    break;
                case "sub":
                    byte_res = generate_sub(instruction);
                    break;
                case "subu":
                    byte_res = generate_subu(instruction);
                    break;
                case "slt":
                    byte_res = generate_slt(instruction);
                    break;
                case "sltu":
                    byte_res = generate_sltu(instruction);
                    break;
                case "and":
                    byte_res = generate_and(instruction);
                    break;
                case "or":
                    byte_res = generate_or(instruction);
                    break;
                case "xor":
                    byte_res = generate_xor(instruction);
                    break;
                case "nor":
                    byte_res = generate_nor(instruction);
                    break;
                case "sll":
                    byte_res = generate_sll(instruction);
                    break;
                case "srl":
                    byte_res = generate_srl(instruction);
                    break;
                case "sra":
                    byte_res = generate_sra(instruction);
                    break;
                case "mult":
                    byte_res = generate_mult(instruction);
                    break;
                case "multu":
                    byte_res = generate_multu(instruction);
                    break;
                case "div":
                    byte_res = generate_div(instruction);
                    break;
                case "divu":
                    byte_res = generate_divu(instruction);
                    break;
                case "addi":
                    byte_res = generate_addi(instruction);
                    break;
                case "addiu":
                    byte_res = generate_addiu(instruction);
                    break;
                case "andi":
                    byte_res = generate_andi(instruction);
                    break;
                case "ori":
                    byte_res = generate_ori(instruction);
                    break;
                case "xori":
                    byte_res = generate_xori(instruction);
                    break;
                case "lui":
                    byte_res = generate_lui(instruction);
                    break;
                case "slti":
                    byte_res = generate_slti(instruction);
                    break;
                case "sltiu":
                    byte_res = generate_sltiu(instruction);
                    break;
                case "beq":
                    byte_res = generate_beq(instruction);
                    break;
                case "bne":
                    byte_res = generate_bne(instruction);
                    break;
                case "blez":
                    byte_res = generate_blez(instruction);
                    break;
                case "bgtz":
                    byte_res = generate_bgtz(instruction);
                    break;
                case "bltz":
                    byte_res = generate_bltz(instruction);
                    break;
                case "bgez":
                    byte_res = generate_bgez(instruction);
                    break;
                case "j":
                    byte_res = generate_j(instruction);
                    break;
                case "jal":
                    byte_res = generate_jal(instruction);
                    break;
                case "jalr":
                    byte_res = generate_jalr(instruction);
                    break;
                case "jr":
                    byte_res = generate_jr(instruction);
                    break;
                case "mfhi":
                    byte_res = generate_mfhi(instruction);
                    break;
                case "mflo":
                    byte_res = generate_mflo(instruction);
                    break;
                case "mthi":
                    byte_res = generate_mthi(instruction);
                    break;
                case "mtlo":
                    byte_res = generate_mtlo(instruction);
                    break;
                case "eret":
                    byte_res = generate_eret(instruction);
                    break;
                case "mfc0":
                    byte_res = generate_mfc0(instruction);
                    break;
                case "mtc0":
                    byte_res = generate_mtc0(instruction);
                    break;
                case "break":
                    byte_res = generate_break(instruction);
                    break;
                case "syscall":
                    byte_res = generate_syscall(instruction);
                    break;
                case "lw":
                    byte_res = generate_lw(instruction);
                    break;
                case "lb":
                    byte_res = generate_lb(instruction);
                    break;
                case "lbu":
                    byte_res = generate_lbu(instruction);
                    break;
                case "lh":
                    byte_res = generate_lh(instruction);
                    break;
                case "lhu":
                    byte_res = generate_lhu(instruction);
                    break;
                case "sw":
                    byte_res = generate_sw(instruction);
                    break;
                case "sb":
                    byte_res = generate_sb(instruction);
                    break;
                case "sh":
                    byte_res = generate_sh(instruction);
                    break;
                // 伪指令
                case "li":
                    byte_res = generate_li(instruction);
                    break;
                case "la":
                    byte_res = generate_la(instruction);
                    break;
                case "move":
                    byte_res = generate_move(instruction);
                    break;
                case "db":
                    byte_res = generate_db(instruction);
                    break;
                case "dw":
                    byte_res = generate_dw(instruction);
                    break;
                case "dd":
                    byte_res = generate_dd(instruction);
                    break;
                default:
                    if (instruction.Split()[1].ToLower() == "equ")
                    {
                        byte_res = generate_equ(instruction);
                        break;
                    }
                    CurrentAddress--;
                    throw new Exception($"无法解析的指令: {op}");
            }

            return byte_res;
        }

        private void FirstScan(string input)
        {
            string[] field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            if (input.StartsWith("#") || input.StartsWith("//") || field.Length == 0) // 注释
                return;

            if (input.StartsWith("BaseAddre:"))
            {
                uint base_addr = Convert.ToUInt32(input.Substring(10, input.Length - 10).Trim(), 16);
                if (CurrentAddress <= base_addr)
                    CurrentAddress = base_addr;
                else
                    throw new Exception("BaseAddre Incorrect.");
            }
            if (input.StartsWith("DataAddre:"))
            {
                uint data_addr = Convert.ToUInt32(input.Substring(10, input.Length - 10).Trim(), 16);
                if (CurrentAddress <= data_addr)
                    CurrentAddress = data_addr;
                else
                    throw new Exception("DataAddre Incorrect.");
            }
            else if (input.Contains(':')) // 编码
            {
                string labelName = input.Split(':')[0];
                if (input.Count(c => c == ':') > 1) // 多于一个:
                    throw new FormatException("Label 格式不符合要求！");
                if (input[0] >= '0' && input[0] <= '9')
                    throw new FormatException("Label 不能以数字作为开始！");
                if (Labels.ContainsKey(labelName))
                    throw new FormatException("无法重复定义标签！");

                Labels.Add(labelName, CurrentAddress);
            }
            else
            {
                if (PseudoIns_To_RealIns_Num.ContainsKey(field[0]))
                    CurrentAddress += PseudoIns_To_RealIns_Num[field[0]]; // 非长久之计
                else
                    CurrentAddress++;
            }
            return;
        }

        #region R-ALU

        private byte[] generate_add(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100000";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_addu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100001";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_sub(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100010";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_subu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100011";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_slt(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "101010";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_sltu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "101011";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_and(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100100";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_or(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100101";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_xor(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100110";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_nor(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100111";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_sll(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = 0;
            int rt = Register.GetIndex(field[2]);
            int rd = Register.GetIndex(field[1]);
            int shamt = int.Parse(field[3]);
            string function = "000000";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_srl(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = 0;
            int rt = Register.GetIndex(field[2]);
            int rd = Register.GetIndex(field[1]);
            int shamt = int.Parse(field[3]);
            string function = "000010";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_sra(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[3]);
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "000011";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_mult(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[1]);
            int rt = Register.GetIndex(field[2]);
            int rd = 0;
            int shamt = 0;
            string function = "011000";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_multu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[1]);
            int rt = Register.GetIndex(field[2]);
            int rd = 0;
            int shamt = 0;
            string function = "011001";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_div(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[1]);
            int rt = Register.GetIndex(field[2]);
            int rd = 0;
            int shamt = 0;
            string function = "011010";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_divu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[1]);
            int rt = Register.GetIndex(field[2]);
            int rd = 0;
            int shamt = 0; ;
            string function = "011011";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        #endregion

        #region I-ALU

        private byte[] generate_addi(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "001000";
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_addiu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "001001";
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_andi(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "001100";
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_ori(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "001101";
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_xori(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "001110";
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_lui(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "001111";
            int rs = 0;
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_slti(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "001010";
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_sltiu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "001011";
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }
        #endregion

        #region branch
        private byte[] generate_beq(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "000100";
            int rs = Register.GetIndex(field[1]);
            int rt = Register.GetIndex(field[2]);
            uint immediate;
            if (UInt32.TryParse(field[3], out immediate) == false)
                immediate = Labels[field[3]];

            Int16 offset = (Int16)(immediate - CurrentAddress); // 存疑
            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(offset, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_bne(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "000101";
            int rs = Register.GetIndex(field[1]);
            int rt = Register.GetIndex(field[2]);
            uint immediate;
            if (UInt32.TryParse(field[3], out immediate) == false)
                immediate = Labels[field[3]];

            Int16 offset = (Int16)(immediate - CurrentAddress); // 存疑
            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(offset, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_blez(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "000110";
            int rs = Register.GetIndex(field[1]);
            int rt = 0;
            uint immediate;
            if (UInt32.TryParse(field[2], out immediate) == false)
                immediate = Labels[field[2]];

            Int16 offset = (Int16)(immediate - CurrentAddress); // 存疑
            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(offset, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_bgtz(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "000111";
            int rs = Register.GetIndex(field[1]);
            int rt = 0;
            uint immediate;
            if (UInt32.TryParse(field[2], out immediate) == false)
                immediate = Labels[field[2]];

            Int16 offset = (Int16)(immediate - CurrentAddress); // 存疑
            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(offset, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_bltz(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "000001";
            int rs = Register.GetIndex(field[1]);
            int rt = 0;
            uint immediate;
            if (UInt32.TryParse(field[2], out immediate) == false)
                immediate = Labels[field[2]];

            Int16 offset = (Int16)(immediate - CurrentAddress); // 存疑
            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(offset, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_bgez(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "000001";
            int rs = Register.GetIndex(field[1]);
            int rt = 1;
            uint immediate;
            if (UInt32.TryParse(field[2], out immediate) == false)
                immediate = Labels[field[2]];

            Int16 offset = (Int16)(immediate - CurrentAddress); // 存疑
            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(offset, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }
        #endregion

        #region jump
        private byte[] generate_j(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "000010";
            uint immediate;
            if (UInt32.TryParse(field[1], out immediate) == false)
                immediate = Labels[field[1]];

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(26, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_jalr(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs, rd, rt = 0;
            if (field.Length == 2)
            {
                rd = 31;
                rs = Register.GetIndex(field[1]);
            }
            else if (field.Length == 3)
            {
                rs = Register.GetIndex(field[2]);
                rd = Register.GetIndex(field[1]);
            }
            else
            {
                throw new Exception("jalr 格式不正确");
            }

            int hint = 0;
            string function = "001001";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(hint, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_jal(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "000011";
            uint immediate;
            if (UInt32.TryParse(field[1], out immediate) == false)
                immediate = Labels[field[1]];

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(26, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_jr(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[1]);
            int rt = 0;
            int rd = 0;
            int hint = 0;
            string function = "001000";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(hint, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }
        #endregion

        #region Transfer
        private byte[] generate_mfhi(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rd = Register.GetIndex(field[1]);
            int rs = 0;
            int rt = 0;
            int shamt = 0;
            string function = "010000";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_mflo(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rd = Register.GetIndex(field[1]);
            int rs = 0;
            int rt = 0;
            int shamt = 0;
            string function = "010010";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_mthi(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[1]);
            int rd = 0;
            int rt = 0;
            int shamt = 0;
            string function = "010001";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_mtlo(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[1]);
            int rd = 0;
            int rt = 0;
            int shamt = 0;
            string function = "010011";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }
        #endregion

        #region Memory
        private byte[] generate_lw(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "100011";
            int base_reg = Register.GetIndex(field[3]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[2]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(base_reg, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_lb(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "100000";
            int base_reg = Register.GetIndex(field[3]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[2]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(base_reg, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_lbu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "100100";
            int base_reg = Register.GetIndex(field[3]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[2]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(base_reg, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_lh(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "100001";
            int base_reg = Register.GetIndex(field[3]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[2]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(base_reg, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_lhu(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "100101";
            int base_reg = Register.GetIndex(field[3]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[2]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(base_reg, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_sw(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "101011";
            int base_reg = Register.GetIndex(field[3]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[2]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(base_reg, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_sb(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "101000";
            int base_reg = Register.GetIndex(field[3]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[2]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(base_reg, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_sh(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            string op = "101001";
            int base_reg = Register.GetIndex(field[3]);
            int rt = Register.GetIndex(field[1]);
            Int16 immediate = Int16.Parse(field[2]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(base_reg, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(immediate, 2).PadLeft(16, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }
        #endregion

        #region Privilege
        private byte[] generate_eret(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            ret_string.Append("01000010000000000000000000011000");

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_mfc0(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            string op = "010000";
            int rs = 0;
            int rt = Register.GetIndex(field[1]);
            int rd = Register.GetIndex(field[2]);
            int sel = 0;
            if (field.Length == 4)
                sel = Register.GetIndex(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append("00000000");
            ret_string.Append(Convert.ToString(sel, 2).PadLeft(3, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_mtc0(string input)
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            string op = "010000";
            int rs = 4;
            int rt = Register.GetIndex(field[1]);
            int rd = Register.GetIndex(field[2]);
            int sel = 0;
            if (field.Length == 4)
                sel = Register.GetIndex(field[3]);

            ret_string.Append(op);
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append("00000000");
            ret_string.Append(Convert.ToString(sel, 2).PadLeft(3, '0'));

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }
        #endregion

        #region Trap
        private byte[] generate_break(string input) // 似乎存疑
        {
            StringBuilder ret_string = new StringBuilder();
            ret_string.Append('0' * 26 + "001101");

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_syscall(string input)
        {
            string ret_string = "00000000000000000000000000001100";

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string, 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        #endregion

        #region Pseudo_Ins

        private byte[] generate_move(string input) // 伪指令，使用add的模式进行
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            int rs = Register.GetIndex(field[2]);
            int rt = Register.GetIndex("$zero");
            int rd = Register.GetIndex(field[1]);
            int shamt = 0;
            string function = "100000";

            ret_string.Append("000000");
            ret_string.Append(Convert.ToString(rs, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rt, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(rd, 2).PadLeft(5, '0'));
            ret_string.Append(Convert.ToString(shamt, 2).PadLeft(5, '0'));
            ret_string.Append(function);

            // 以下转化为byte[]
            byte[] intBytes = BitConverter.GetBytes(Convert.ToInt32(ret_string.ToString(), 2));
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_la(string input) // 伪指令，使用两次lw的模式进行
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            if (UInt32.TryParse(field[3], out UInt32 address) == false)
                address = Labels[field[2]];
            Int16 upper16 = (Int16)(address >> 16);
            Int16 lower16 = (Int16)(address);

            byte[] intBytes = generate_lui($"lui {field[1]}, {upper16}");
            intBytes.Concat(generate_ori($"lui {field[1]}, {field[1]}, {lower16}")).ToArray();

            return intBytes;
        }

        private byte[] generate_li(string input) // 伪指令，使用两次lw的模式进行
        {
            StringBuilder ret_string = new StringBuilder();
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);

            if (Int32.TryParse(field[3], out Int32 address) == false)
                throw new Exception("无法执行li指令：无效的立即数");
            Int16 upper16 = (Int16)(address >> 16);
            Int16 lower16 = (Int16)(address);

            byte[] intBytes = generate_lui($"lui {field[1]}, {upper16}");
            intBytes.Concat(generate_ori($"lui {field[1]}, {field[1]}, {lower16}")).ToArray();

            return intBytes;
        }

        private byte[] generate_db(string input) // 伪指令
        {
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            byte[] intBytes = { };
            for (int i = 1; i < field.Length; i++)
            {
                var tmpBytes = BitConverter.GetBytes(Convert.ToInt16(field[i], 16)).Take(1);
                intBytes = intBytes.Concat(tmpBytes).ToArray();
            }
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_dw(string input) // 伪指令
        {
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            byte[] intBytes = { };
            for (int i = 1; i < field.Length; i++)
            {
                var tmpBytes = BitConverter.GetBytes(Convert.ToInt16(field[i], 16)).Take(2);
                intBytes = intBytes.Concat(tmpBytes).ToArray();
            }
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_dd(string input) // 伪指令
        {
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            byte[] intBytes = { };
            for (int i = 1; i < field.Length; i++)
            {
                var tmpBytes = BitConverter.GetBytes(Convert.ToInt32(field[i], 16)).Take(4);
                intBytes = intBytes.Concat(tmpBytes).ToArray();
            }
            if (BitConverter.IsLittleEndian) Array.Reverse(intBytes);
            return intBytes;
        }

        private byte[] generate_equ(string input) // 伪指令
        {
            var field = input.Split(delimitter, StringSplitOptions.RemoveEmptyEntries);
            Variables.Add(field[0], int.Parse(field[2]));
            return new byte[] { };
        }
        #endregion
    }

    class Register
    {
        int index;
        string name;
        int value;

        public string Name { get => name; set => name = value; }
        public int Index { get => index; set => index = value; }
        public int Value { get => value; set => this.value = value; }

        public static readonly string[] reg_names =
        {
            "$zero", "$at", "$v0", "$v1", "$a0", "$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra"
        }; // 寄存器组的名字

        public static Register[] GetRegisters()
        {
            Register[] registers = new Register[32];
            for (int i = 0; i < 32; i++)
                registers[i] = new Register(i);
            return registers;
        } // 初始化并返回寄存器组

        public static int GetIndex(string name)
        {
            if (name == string.Empty)
                throw new Exception("获取寄存器信息时出现错误");

            int index;
            name = name.ToLower();
            if (reg_names.Contains(name))
                index = Array.IndexOf(reg_names, name);
            else if (char.ToUpper(name[0]) == 'r' || char.ToUpper(name[0]) == '$')
                index = int.Parse(name.Substring(1));
            else
                throw new Exception("获取寄存器信息时出现错误");

            return index;
        } // 获取寄存器的编号，如果错误的话会返回-1

        private Register(int _index)
        {
            this.Index = _index;
            this.Name = reg_names[_index];
            this.Value = 0;
        } // 辅助私有构造函数，不会直接调用
    }

    class Instruction
    {
        string name;
        int opcode;
        int func;
        int rs, rt, rd, shamt;
        int immediate;

        enum InstructionType
        {
            R = 0,
            I = 1,
            J = 2
        };
        InstructionType instructionType;

        Dictionary<string, int> OPcode_Dict = new Dictionary<string, int>()
        {
            { "lw",  0x23 },
            { "lb",  0x20 },
            { "lbu", 0x24 },
            { "lh",  0x21 },
            { "lhu", 0x25 },
            { "sw",  0x2B },
            { "sb",  0x28 },
            { "sh",  0x29 },
            { "add", 0x00 },
            { "addu",0x00 },
            { "sub", 0x00 },
            { "subu",0x00 },
            { "slt", 0x00 },
            { "sltu",0x00 },
            { "and", 0x00 },
            { "or",  0x00 },
            { "xor", 0x00 },
            { "nor", 0x00 },
            { "sll", 0x00 },
            { "srl", 0x00 },
            { "sra", 0x00 },
            { "mult",0x00 },
            { "multu",0x0 },
            { "div", 0x00 },
            { "divu",0x00 },
            { "addi",0x08 },
            { "addiu",0x9 },
            { "andi",0x0C },
            { "ori", 0x0D },
            { "xori",0x0E },
            { "lui", 0x0F },
            { "slti",0x0A },
            { "sltiu",0xB },
            { "beq", 0x04 },
            { "bne", 0x05 },
            { "blez",0x06 },
            { "bgtz",0x07 },
            { "bltz",0x01 },
            { "bgez",0x01 },
            { "j",   0x02 },
            { "jal", 0x03 },
            { "jalr",0x00 },
            { "jr",  0x00 },
            { "mfhi",0x00 },
            { "mflo",0x00 },
            { "mthi",0x00 },
            { "mtlo",0x00 },
            { "eret",0x10 },
            { "mfco",0x10 },
            { "mtco",0x10 },
            { "break",0x0 },
            { "syscall",0 },
        };
        Dictionary<string, InstructionType> Type_Dict = new Dictionary<string, InstructionType>()
        {
            { "lw",  InstructionType.I },
            { "lb",  InstructionType.I },
            { "lbu", InstructionType.I },
            { "lh",  InstructionType.I },
            { "lhu", InstructionType.I },
            { "sw",  InstructionType.I },
            { "sb",  InstructionType.I },
            { "sh",  InstructionType.I },
            { "add", InstructionType.R },
            { "addu",InstructionType.R },
            { "sub", InstructionType.R },
            { "subu",InstructionType.R },
            { "slt", InstructionType.R },
            { "sltu",InstructionType.R },
            { "and", InstructionType.R },
            { "or",  InstructionType.R },
            { "xor", InstructionType.R },
            { "nor", InstructionType.R },
            { "sll", InstructionType.R },
            { "srl", InstructionType.R },
            { "sra", InstructionType.R },
            { "mult",InstructionType.R },
            { "multu",InstructionType.R },
            { "div", InstructionType.R },
            { "divu",InstructionType.R },
            { "addi",InstructionType.R },
            { "addiu",InstructionType.I },
            { "andi",InstructionType.I },
            { "ori", InstructionType.I },
            { "xori",InstructionType.I },
            { "lui", InstructionType.I },
            { "slti",InstructionType.I },
            { "sltiu",InstructionType.I },
            { "beq", InstructionType.I },
            { "bne", InstructionType.I },
            { "blez",InstructionType.I },
            { "bgtz",InstructionType.I },
            { "bltz",InstructionType.I },
            { "bgez",InstructionType.I },
            { "j",   InstructionType.J },
            { "jal", InstructionType.J },
            { "jalr",InstructionType.R },
            { "jr",  InstructionType.R },
            { "mfhi",InstructionType.R },
            { "mflo",InstructionType.R },
            { "mthi",InstructionType.R },
            { "mtlo",InstructionType.R },
            { "eret",InstructionType.I },
            { "mfco",InstructionType.I },
            { "mtco",InstructionType.I },
            { "break",InstructionType.R },
            { "syscall",InstructionType.R },

        };
        Dictionary<string, int> Funct_Dict = new Dictionary<string, int>()
        {
            { "add", 0x20 },
            { "addu",0x21 },
            { "sub", 0x22 },
            { "subu",0x23 },
            { "slt", 0x2A },
            { "sltu",0x2B },
            { "and", 0x24 },
            { "or",  0x25 },
            { "xor", 0x26 },
            { "nor", 0x27 },
            { "sll", 0x00 },
            { "srl", 0x02 },
            { "sra", 0x03 },
            { "mult",0x18 },
            { "multu",019 },
            { "div", 0x1A },
            { "divu",0x1B },
            { "jalr",0x09 },
            { "jr",  0x08 },
            { "mfhi",0x10 },
            { "mflo",0x12 },
            { "mthi",0x11 },
            { "mtlo",0x13 },
            { "break",0xD },
            { "syscall", 0x0C },
        }; // key: R型指令名(string), vlue: func(int)

        public Instruction(string input)
        {
            if (input.StartsWith("#") || input.StartsWith("//")) // if is a comment
                return;

            if (!input.EndsWith(";"))
                throw new FormatException("Instructions must ends with ';'!");

            if (input.IndexOf(':') != -1) // if contains identifier
            {
                string identifier = input.Substring(0, input.IndexOf(':'));

                input = input.Substring(input.IndexOf(':') + 1);
            }
            if (input[0] == '.') // 伪指令
            {
                /// TODO
            }
            string[] field = input.Split();
            this.name = field[0];
            if (!OPcode_Dict.ContainsKey(name) || !Type_Dict.ContainsKey(name))
                throw new ArgumentException("No such instructions as " + name);
            this.opcode = OPcode_Dict[name];
            this.instructionType = Type_Dict[name];

            switch (instructionType)
            {
                /// TODO
                case InstructionType.R:
                    this.rd = Register.GetIndex(field[1]);
                    this.rs = Register.GetIndex(field[2]);
                    this.rt = Register.GetIndex(field[3]);
                    this.func = Funct_Dict[name];
                    break;
            }

        }

        public override string ToString()
        {
            return base.ToString();
        }
    }
}